<template>
  <div class="dashboard">
    <div class="dashboard-header">
      <h1>仪表盘</h1>
      <div class="header-actions">
        <button class="action-btn" title="刷新" @click="refreshData">
          <span class="icon">🔄</span>
        </button>
        <button class="action-btn" title="设置">
          <span class="icon">⚙️</span>
        </button>
        <button class="action-btn" title="帮助">
          <span class="icon">❓</span>
        </button>
      </div>
    </div>

    <div class="dashboard-content">
      <div class="welcome-section">
        <h2>LDesign UI</h2>
        <p>开发工具界面 - 系统信息展示</p>
      </div>

      <!-- 加载状态 -->
      <div v-if="loading" class="loading-section">
        <div class="loading-spinner">⏳</div>
        <p>正在加载系统信息...</p>
      </div>

      <!-- 系统信息 -->
      <div v-else-if="systemInfo" class="system-info">
        <!-- 项目信息 -->
        <div class="info-card">
          <h3>📦 项目信息</h3>
          <div class="info-grid">
            <div class="info-item">
              <label>项目名称:</label>
              <span>{{ systemInfo.project?.name || 'N/A' }}</span>
            </div>
            <div class="info-item">
              <label>版本:</label>
              <span>{{ systemInfo.project?.version || 'N/A' }}</span>
            </div>
            <div class="info-item">
              <label>描述:</label>
              <span>{{ systemInfo.project?.description || 'N/A' }}</span>
            </div>
          </div>
        </div>

        <!-- Node.js 信息 -->
        <div class="info-card">
          <h3>🟢 Node.js 信息</h3>
          <div class="info-grid">
            <div class="info-item">
              <label>版本:</label>
              <span>{{ systemInfo.node?.version || 'N/A' }}</span>
            </div>
            <div class="info-item">
              <label>平台:</label>
              <span>{{ systemInfo.node?.platform || 'N/A' }}</span>
            </div>
            <div class="info-item">
              <label>架构:</label>
              <span>{{ systemInfo.node?.arch || 'N/A' }}</span>
            </div>
            <div class="info-item">
              <label>运行时间:</label>
              <span>{{ formatUptime(systemInfo.node?.uptime) }}</span>
            </div>
          </div>
        </div>

        <!-- 系统信息 -->
        <div class="info-card">
          <h3>💻 系统信息</h3>
          <div class="info-grid">
            <div class="info-item">
              <label>主机名:</label>
              <span>{{ systemInfo.system?.hostname || 'N/A' }}</span>
            </div>
            <div class="info-item">
              <label>操作系统:</label>
              <span>{{ systemInfo.system?.type || 'N/A' }} {{ systemInfo.system?.release || '' }}</span>
            </div>
            <div class="info-item">
              <label>CPU 核心:</label>
              <span>{{ systemInfo.system?.cpus || 'N/A' }} 核</span>
            </div>
            <div class="info-item">
              <label>总内存:</label>
              <span>{{ formatBytes(systemInfo.system?.totalMemory) }}</span>
            </div>
          </div>
        </div>

        <!-- Git 信息 -->
        <div class="info-card" v-if="systemInfo.git?.isRepository">
          <h3>🔧 Git 信息</h3>
          <div class="info-grid">
            <div class="info-item">
              <label>分支:</label>
              <span>{{ systemInfo.git?.branch || 'N/A' }}</span>
            </div>
            <div class="info-item">
              <label>提交:</label>
              <span>{{ systemInfo.git?.shortCommit || 'N/A' }}</span>
            </div>
            <div class="info-item">
              <label>作者:</label>
              <span>{{ systemInfo.git?.author || 'N/A' }}</span>
            </div>
            <div class="info-item">
              <label>状态:</label>
              <span :class="{ 'status-clean': !systemInfo.git?.hasChanges, 'status-dirty': systemInfo.git?.hasChanges }">
                {{ systemInfo.git?.hasChanges ? `${systemInfo.git.changedFiles} 个文件已修改` : '工作区干净' }}
              </span>
            </div>
          </div>
        </div>

        <!-- 内存使用 -->
        <div class="info-card">
          <h3>📊 内存使用</h3>
          <div class="info-grid">
            <div class="info-item">
              <label>RSS:</label>
              <span>{{ systemInfo.memory?.rss || 0 }} MB</span>
            </div>
            <div class="info-item">
              <label>堆内存:</label>
              <span>{{ systemInfo.memory?.heapUsed || 0 }} / {{ systemInfo.memory?.heapTotal || 0 }} MB</span>
            </div>
            <div class="info-item">
              <label>外部内存:</label>
              <span>{{ systemInfo.memory?.external || 0 }} MB</span>
            </div>
          </div>
        </div>
      </div>

      <!-- 错误状态 -->
      <div v-else-if="error" class="error-section">
        <div class="error-icon">❌</div>
        <h3>加载失败</h3>
        <p>{{ error }}</p>
        <button @click="refreshData" class="retry-btn">重试</button>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, onMounted } from 'vue'
import { useApi } from '../composables/useApi'

// 响应式数据
const loading = ref(true)
const error = ref<string | null>(null)
const systemInfo = ref<any>(null)

// API 实例
const api = useApi()

// 格式化运行时间
const formatUptime = (seconds: number | undefined): string => {
  if (!seconds) return 'N/A'

  const days = Math.floor(seconds / 86400)
  const hours = Math.floor((seconds % 86400) / 3600)
  const minutes = Math.floor((seconds % 3600) / 60)

  if (days > 0) {
    return `${days}天 ${hours}小时 ${minutes}分钟`
  } else if (hours > 0) {
    return `${hours}小时 ${minutes}分钟`
  } else {
    return `${minutes}分钟`
  }
}

// 格式化字节数
const formatBytes = (bytes: number | undefined): string => {
  if (!bytes) return 'N/A'

  const sizes = ['B', 'KB', 'MB', 'GB', 'TB']
  const i = Math.floor(Math.log(bytes) / Math.log(1024))
  return `${Math.round(bytes / Math.pow(1024, i) * 100) / 100} ${sizes[i]}`
}

// 刷新数据
const refreshData = async () => {
  loading.value = true
  error.value = null

  try {
    const response = await api.get('/api/info')
    if (response.success) {
      systemInfo.value = response.data
    } else {
      error.value = response.message || '获取系统信息失败'
    }
  } catch (err) {
    error.value = err instanceof Error ? err.message : '网络请求失败'
  } finally {
    loading.value = false
  }
}

// 组件挂载时加载数据
onMounted(() => {
  refreshData()
})
</script>

<style lang="less" scoped>
.dashboard {
  max-width: 1200px;
  margin: 0 auto;
  padding: var(--ls-spacing-xl);
}

.dashboard-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--ls-spacing-xl);
  padding-bottom: var(--ls-spacing-base);
  border-bottom: 1px solid var(--ldesign-border-color);

  h1 {
    font-size: var(--ls-font-size-h2);
    color: var(--ldesign-text-color-primary);
    margin: 0;
  }

  .header-actions {
    display: flex;
    gap: var(--ls-spacing-sm);

    .action-btn {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 40px;
      height: 40px;
      border: 1px solid var(--ldesign-border-color);
      border-radius: var(--ls-border-radius-base);
      background: var(--ldesign-bg-color-component);
      cursor: pointer;
      transition: all 0.2s ease;

      &:hover {
        background: var(--ldesign-bg-color-component-hover);
        border-color: var(--ldesign-border-color-hover);
      }

      .icon {
        font-size: 16px;
      }
    }
  }
}

.dashboard-content {
  .welcome-section {
    text-align: center;
    margin-bottom: var(--ls-spacing-xl);
    padding: var(--ls-spacing-xl);
    background: var(--ldesign-bg-color-component);
    border-radius: var(--ls-border-radius-lg);
    border: 1px solid var(--ldesign-border-color);

    h2 {
      font-size: var(--ls-font-size-xl);
      color: var(--ldesign-text-color-primary);
      margin-bottom: var(--ls-spacing-sm);
    }

    p {
      color: var(--ldesign-text-color-secondary);
      font-size: var(--ls-font-size-base);
      margin: 0;
    }
  }

  .loading-section {
    text-align: center;
    padding: var(--ls-spacing-xxl);

    .loading-spinner {
      font-size: 32px;
      margin-bottom: var(--ls-spacing-base);
    }

    p {
      color: var(--ldesign-text-color-secondary);
      font-size: var(--ls-font-size-base);
    }
  }

  .error-section {
    text-align: center;
    padding: var(--ls-spacing-xxl);

    .error-icon {
      font-size: 48px;
      margin-bottom: var(--ls-spacing-base);
    }

    h3 {
      color: var(--ldesign-error-color);
      margin-bottom: var(--ls-spacing-sm);
    }

    p {
      color: var(--ldesign-text-color-secondary);
      margin-bottom: var(--ls-spacing-lg);
    }

    .retry-btn {
      padding: var(--ls-spacing-sm) var(--ls-spacing-lg);
      background: var(--ldesign-brand-color);
      color: white;
      border: none;
      border-radius: var(--ls-border-radius-base);
      cursor: pointer;
      font-size: var(--ls-font-size-sm);
      transition: background-color 0.2s ease;

      &:hover {
        background: var(--ldesign-brand-color-hover);
      }
    }
  }

  .system-info {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: var(--ls-spacing-lg);

    .info-card {
      background: var(--ldesign-bg-color-component);
      border: 1px solid var(--ldesign-border-color);
      border-radius: var(--ls-border-radius-lg);
      padding: var(--ls-spacing-lg);

      h3 {
        font-size: var(--ls-font-size-lg);
        color: var(--ldesign-text-color-primary);
        margin: 0 0 var(--ls-spacing-base) 0;
        display: flex;
        align-items: center;
        gap: var(--ls-spacing-sm);
      }

      .info-grid {
        display: grid;
        gap: var(--ls-spacing-sm);

        .info-item {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: var(--ls-spacing-xs) 0;
          border-bottom: 1px solid var(--ldesign-border-level-1-color);

          &:last-child {
            border-bottom: none;
          }

          label {
            font-weight: 500;
            color: var(--ldesign-text-color-secondary);
            font-size: var(--ls-font-size-sm);
          }

          span {
            color: var(--ldesign-text-color-primary);
            font-size: var(--ls-font-size-sm);
            font-family: 'Consolas', 'Monaco', monospace;

            &.status-clean {
              color: var(--ldesign-success-color);
            }

            &.status-dirty {
              color: var(--ldesign-warning-color);
            }
          }
        }
      }
    }
  }
}

// 响应式设计
@media (max-width: 768px) {
  .dashboard {
    padding: var(--ls-spacing-base);
  }

  .dashboard-header {
    flex-direction: column;
    gap: var(--ls-spacing-base);
    text-align: center;

    .header-actions {
      justify-content: center;
    }
  }

  .system-info {
    grid-template-columns: 1fr;
  }
}
</style>
