<template>
  <div class="project-action">
    <!-- 页面头部 -->
    <div class="page-header">
      <div class="header-left">
        <button @click="goBack" class="btn-back">
          <ArrowLeft :size="18" />
          <span>返回</span>
        </button>
        <div class="action-title">
          <component :is="actionIcon" :size="32" class="title-icon" />
          <div>
            <h1>{{ actionTitle }}</h1>
            <p class="subtitle">{{ project?.name }}</p>
          </div>
        </div>
      </div>
      <div class="header-actions">
        <button 
          v-if="!running"
          @click="startAction" 
          :disabled="running" 
          class="btn-primary"
        >
          <Play :size="18" />
          <span>开始{{ actionTitle }}</span>
        </button>
        <button 
          v-else
          @click="stopAction" 
          class="btn-danger"
        >
          <Square :size="18" />
          <span>停止</span>
        </button>
      </div>
    </div>

    <!-- 主内容区 -->
    <div class="action-content">
      <!-- 状态卡片 -->
      <div class="status-card">
        <div class="status-header">
          <div class="status-info">
            <component :is="statusIcon" :size="24" :class="['status-icon', statusClass]" />
            <div>
              <h3>{{ statusText }}</h3>
              <p>{{ statusDescription }}</p>
            </div>
          </div>
          <div v-if="running" class="status-time">
            <Clock :size="16" />
            <span>{{ elapsedTime }}</span>
          </div>
        </div>
      </div>

      <!-- 日志输出 -->
      <div class="log-card">
        <div class="log-header">
          <Terminal :size="20" />
          <h3>输出日志</h3>
          <div class="log-actions">
            <button class="log-action-btn" @click="clearLogs" title="清空日志">
              <Trash2 :size="16" />
            </button>
            <button class="log-action-btn" @click="downloadLogs" title="下载日志">
              <Download :size="16" />
            </button>
          </div>
        </div>
        <div class="log-content" ref="logContentRef">
          <div v-if="logs.length === 0" class="log-empty">
            <FileText :size="32" />
            <p>暂无日志输出</p>
          </div>
          <div 
            v-for="(log, index) in logs" 
            :key="index"
            class="log-line"
            :class="log.type"
          >
            <span class="log-time">{{ log.time }}</span>
            <span class="log-message">{{ log.message }}</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted, onUnmounted, nextTick } from 'vue'
import { useRoute, useRouter } from 'vue-router'
import { 
  ArrowLeft, Play, Square, Clock, Terminal, Trash2, Download, FileText,
  Code, Package, Eye, Upload, Rocket, TestTube,
  Loader2, CheckCircle, XCircle, AlertCircle
} from 'lucide-vue-next'
import { useApi } from '../composables/useApi'
import { useWebSocket } from '../composables/useWebSocket'

// 路由
const route = useRoute()
const router = useRouter()

// API
const api = useApi()
const { subscribe } = useWebSocket()

// 响应式数据
const project = ref<any>(null)
const running = ref(false)
const logs = ref<Array<{ time: string; message: string; type: string }>>([])
const logContentRef = ref<HTMLElement | null>(null)
const startTime = ref<number>(0)
const elapsedTime = ref('00:00:00')
let elapsedTimer: number | null = null
let unsubscribeList: (() => void)[] = []

// 操作类型映射
const actionMap: Record<string, any> = {
  dev: { title: '开发', icon: Code, endpoint: '/dev' },
  build: { title: '打包', icon: Package, endpoint: '/build' },
  preview: { title: '预览', icon: Eye, endpoint: '/preview' },
  publish: { title: '发布', icon: Upload, endpoint: '/publish' },
  deploy: { title: '部署', icon: Rocket, endpoint: '/deploy' },
  test: { title: '测试', icon: TestTube, endpoint: '/test' }
}

// 计算属性
const actionType = computed(() => route.params.action as string)
const actionConfig = computed(() => actionMap[actionType.value] || actionMap.dev)
const actionTitle = computed(() => actionConfig.value.title)
const actionIcon = computed(() => actionConfig.value.icon)

const statusIcon = computed(() => {
  if (running.value) return Loader2
  if (logs.value.some(log => log.type === 'error')) return XCircle
  if (logs.value.length > 0) return CheckCircle
  return AlertCircle
})

const statusClass = computed(() => {
  if (running.value) return 'running'
  if (logs.value.some(log => log.type === 'error')) return 'error'
  if (logs.value.length > 0) return 'success'
  return 'idle'
})

const statusText = computed(() => {
  if (running.value) return '运行中...'
  if (logs.value.some(log => log.type === 'error')) return '执行失败'
  if (logs.value.length > 0) return '执行完成'
  return '就绪'
})

const statusDescription = computed(() => {
  if (running.value) return `正在执行${actionTitle.value}操作`
  if (logs.value.some(log => log.type === 'error')) return '操作执行过程中出现错误'
  if (logs.value.length > 0) return '操作已成功完成'
  return `点击开始按钮执行${actionTitle.value}操作`
})

// 方法
const addLog = (message: string, type: 'info' | 'success' | 'error' | 'warning' = 'info') => {
  const now = new Date()
  const time = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}`
  
  logs.value.push({ time, message, type })
  
  // 自动滚动到底部
  nextTick(() => {
    if (logContentRef.value) {
      logContentRef.value.scrollTop = logContentRef.value.scrollHeight
    }
  })
}

const clearLogs = () => {
  logs.value = []
}

const downloadLogs = () => {
  const content = logs.value.map(log => `[${log.time}] ${log.message}`).join('\n')
  const blob = new Blob([content], { type: 'text/plain' })
  const url = URL.createObjectURL(blob)
  const a = document.createElement('a')
  a.href = url
  a.download = `${actionType.value}-${Date.now()}.log`
  a.click()
  URL.revokeObjectURL(url)
}

const updateElapsedTime = () => {
  const elapsed = Date.now() - startTime.value
  const hours = Math.floor(elapsed / 3600000)
  const minutes = Math.floor((elapsed % 3600000) / 60000)
  const seconds = Math.floor((elapsed % 60000) / 1000)
  elapsedTime.value = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`
}

const startAction = async () => {
  running.value = true
  startTime.value = Date.now()
  logs.value = []
  
  addLog(`开始${actionTitle.value}...`, 'info')
  
  // 启动计时器
  elapsedTimer = window.setInterval(updateElapsedTime, 1000)
  
  try {
    const projectId = route.params.id as string
    const response = await api.post(`/api/projects/${projectId}${actionConfig.value.endpoint}`)
    
    if (response.success) {
      addLog(response.message || `${actionTitle.value}完成`, 'success')
    } else {
      addLog(response.message || `${actionTitle.value}失败`, 'error')
    }
  } catch (error) {
    addLog(error instanceof Error ? error.message : `${actionTitle.value}失败`, 'error')
  } finally {
    running.value = false
    if (elapsedTimer) {
      clearInterval(elapsedTimer)
      elapsedTimer = null
    }
  }
}

const stopAction = () => {
  running.value = false
  if (elapsedTimer) {
    clearInterval(elapsedTimer)
    elapsedTimer = null
  }
  addLog('操作已停止', 'warning')
}

const goBack = () => {
  const projectId = route.params.id as string
  router.push(`/projects/${projectId}`)
}

const loadProject = async () => {
  const projectId = route.params.id as string
  try {
    const response = await api.get(`/api/projects/${projectId}`)
    if (response.success) {
      project.value = response.data
    }
  } catch (error) {
    console.error('加载项目失败:', error)
  }
}

// 生命周期
onMounted(() => {
  loadProject()
})

onUnmounted(() => {
  if (elapsedTimer) {
    clearInterval(elapsedTimer)
  }
  unsubscribeList.forEach(unsubscribe => unsubscribe())
})
</script>

<style lang="less" scoped>
.project-action {
  padding: var(--ls-padding-lg);
  max-width: 1400px;
  margin: 0 auto;
  height: calc(100vh - 128px);
  display: flex;
  flex-direction: column;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--ls-margin-lg);

  .header-left {
    display: flex;
    align-items: center;
    gap: var(--ls-spacing-base);

    .action-title {
      display: flex;
      align-items: center;
      gap: var(--ls-spacing-base);

      .title-icon {
        color: var(--ldesign-brand-color);
      }

      h1 {
        margin: 0;
        font-size: var(--ls-font-size-h2);
        color: var(--ldesign-text-color-primary);
      }

      .subtitle {
        margin: 4px 0 0 0;
        font-size: var(--ls-font-size-sm);
        color: var(--ldesign-text-color-secondary);
      }
    }
  }

  .header-actions {
    display: flex;
    gap: var(--ls-spacing-sm);
  }
}

.action-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: var(--ls-spacing-lg);
  overflow: hidden;
}

.status-card {
  background: var(--ldesign-bg-color-container);
  border: 1px solid var(--ldesign-border-color);
  border-radius: var(--ls-border-radius-lg);
  padding: var(--ls-padding-lg);

  .status-header {
    display: flex;
    justify-content: space-between;
    align-items: center;

    .status-info {
      display: flex;
      align-items: center;
      gap: var(--ls-spacing-base);

      .status-icon {
        flex-shrink: 0;

        &.running {
          color: var(--ldesign-brand-color);
          animation: spin 1s linear infinite;
        }

        &.success {
          color: var(--ldesign-success-color);
        }

        &.error {
          color: var(--ldesign-error-color);
        }

        &.idle {
          color: var(--ldesign-text-color-placeholder);
        }
      }

      h3 {
        margin: 0 0 4px 0;
        font-size: var(--ls-font-size-lg);
        color: var(--ldesign-text-color-primary);
        font-weight: 600;
      }

      p {
        margin: 0;
        font-size: var(--ls-font-size-sm);
        color: var(--ldesign-text-color-secondary);
      }
    }

    .status-time {
      display: flex;
      align-items: center;
      gap: var(--ls-spacing-xs);
      padding: var(--ls-padding-sm) var(--ls-padding-base);
      background: var(--ldesign-bg-color-component);
      border-radius: var(--ls-border-radius-base);
      font-family: 'Consolas', 'Monaco', monospace;
      font-size: var(--ls-font-size-base);
      color: var(--ldesign-text-color-primary);
      font-weight: 600;
    }
  }
}

.log-card {
  flex: 1;
  background: var(--ldesign-bg-color-container);
  border: 1px solid var(--ldesign-border-color);
  border-radius: var(--ls-border-radius-lg);
  display: flex;
  flex-direction: column;
  overflow: hidden;

  .log-header {
    display: flex;
    align-items: center;
    gap: var(--ls-spacing-sm);
    padding: var(--ls-padding-base);
    background: var(--ldesign-bg-color-component);
    border-bottom: 1px solid var(--ldesign-border-color);

    svg {
      color: var(--ldesign-brand-color);
    }

    h3 {
      margin: 0;
      flex: 1;
      font-size: var(--ls-font-size-base);
      color: var(--ldesign-text-color-primary);
      font-weight: 600;
    }

    .log-actions {
      display: flex;
      gap: var(--ls-spacing-xs);
    }

    .log-action-btn {
      padding: 6px;
      border: none;
      background: none;
      cursor: pointer;
      color: var(--ldesign-text-color-secondary);
      border-radius: var(--ls-border-radius-sm);
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.2s ease;

      &:hover {
        background: var(--ldesign-bg-color-component-hover);
        color: var(--ldesign-text-color-primary);
      }
    }
  }

  .log-content {
    flex: 1;
    overflow-y: auto;
    padding: var(--ls-padding-base);
    background: var(--ldesign-bg-color-component);
    font-family: 'Consolas', 'Monaco', monospace;
    font-size: 13px;
    line-height: 1.6;

    .log-empty {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100%;
      color: var(--ldesign-text-color-placeholder);

      svg {
        margin-bottom: var(--ls-spacing-base);
      }

      p {
        margin: 0;
      }
    }

    .log-line {
      display: flex;
      gap: var(--ls-spacing-sm);
      padding: 2px 0;

      .log-time {
        color: var(--ldesign-text-color-placeholder);
        flex-shrink: 0;
      }

      .log-message {
        color: var(--ldesign-text-color-secondary);
        word-break: break-all;
      }

      &.success .log-message {
        color: var(--ldesign-success-color);
      }

      &.error .log-message {
        color: var(--ldesign-error-color);
      }

      &.warning .log-message {
        color: var(--ldesign-warning-color);
      }
    }
  }
}

/* 按钮样式 */
.btn-primary, .btn-secondary, .btn-back, .btn-danger {
  display: inline-flex;
  align-items: center;
  gap: var(--ls-spacing-xs);
  padding: var(--ls-padding-sm) var(--ls-padding-base);
  border: 1px solid transparent;
  border-radius: var(--ls-border-radius-base);
  font-size: var(--ls-font-size-sm);
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
}

.btn-primary {
  background: var(--ldesign-brand-color);
  color: white;

  &:hover:not(:disabled) {
    background: var(--ldesign-brand-color-hover);
  }
}

.btn-danger {
  background: var(--ldesign-error-color);
  color: white;

  &:hover:not(:disabled) {
    background: var(--ldesign-error-color-hover);
  }
}

.btn-back {
  background: none;
  color: var(--ldesign-text-color-secondary);
  padding: var(--ls-padding-xs) var(--ls-padding-sm);

  &:hover {
    color: var(--ldesign-text-color-primary);
    background: var(--ldesign-bg-color-component-hover);
  }
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

/* 响应式设计 */
@media (max-width: 768px) {
  .project-action {
    padding: var(--ls-padding-base);
  }

  .page-header {
    flex-direction: column;
    gap: var(--ls-spacing-base);
    align-items: stretch;

    .header-left {
      flex-direction: column;
      align-items: flex-start;
    }

    .header-actions {
      justify-content: stretch;

      button {
        flex: 1;
      }
    }
  }
}
</style>

