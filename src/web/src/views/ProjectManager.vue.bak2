<template>
  <div class="project-manager">
    <!-- 页面头部 -->
    <div class="page-header">
      <div class="header-left">
        <h1>项目管理</h1>
        <p class="header-subtitle">管理您的所有项目</p>
      </div>
      <div class="header-actions">
        <button @click="refreshProjects" :disabled="loading" class="btn-secondary">
          <RefreshCw :size="18" :class="{ 'spinning': loading }" />
          <span>刷新</span>
        </button>
        <button @click="showImportDialog = true" class="btn-primary">
          <FolderPlus :size="18" />
          <span>导入项目</span>
        </button>
      </div>
    </div>

    <!-- 项目列表 -->
    <div class="projects-container">
      <!-- 加载状态 -->
      <div v-if="loading" class="loading-state">
        <Loader2 :size="48" class="loading-spinner" />
        <p>正在加载项目列表...</p>
      </div>

      <!-- 空状态 -->
      <div v-else-if="projects.length === 0" class="empty-state">
        <div class="empty-icon">
          <FolderOpen :size="64" />
        </div>
        <h2>暂无项目</h2>
        <p>点击"导入项目"按钮添加您的第一个项目</p>
        <button @click="showImportDialog = true" class="btn-primary btn-large">
          <FolderPlus :size="20" />
          <span>导入项目</span>
        </button>
      </div>

      <!-- 项目网格 -->
      <div v-else class="projects-grid">
        <div 
          v-for="project in projects" 
          :key="project.id" 
          class="project-card"
          @click="goToProject(project.id)"
        >
          <div class="project-header">
            <div class="project-icon">
              <FolderGit2 :size="24" />
            </div>
            <div class="project-info">
              <h3 class="project-name">{{ project.name }}</h3>
              <div class="project-badges">
                <span v-if="project.isProject" class="badge badge-project">
                  <Rocket :size="12" />
                  项目
                </span>
                <span v-if="project.isLibrary" class="badge badge-library">
                  <Package :size="12" />
                  库
                </span>
              </div>
            </div>
            <button 
              @click.stop="deleteProject(project.id)" 
              class="btn-delete"
              title="删除项目"
            >
              <Trash2 :size="16" />
            </button>
          </div>
          
          <div class="project-description">
            <p>{{ project.description || '暂无描述' }}</p>
          </div>

          <div class="project-path">
            <FolderOpen :size="14" />
            <span>{{ project.path }}</span>
          </div>
          
          <div class="project-meta">
            <div class="meta-item">
              <Calendar :size="14" />
              <span>{{ formatDate(project.createdAt) }}</span>
            </div>
            <div class="meta-item" v-if="project.version">
              <Tag :size="14" />
              <span>v{{ project.version }}</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- 导入项目对话框 -->
    <div v-if="showImportDialog" class="modal-overlay" @click="closeImportDialog">
      <div class="modal-content" @click.stop>
        <div class="modal-header">
          <div class="modal-title">
            <FolderPlus :size="24" />
            <h2>导入项目</h2>
          </div>
          <button @click="closeImportDialog" class="btn-close">
            <X :size="20" />
          </button>
        </div>
        
        <div class="modal-body">
          <div class="form-group">
            <label>
              <Folder :size="16" />
              <span>项目目录</span>
            </label>
            <div class="input-group">
              <input 
                type="text" 
                v-model="importForm.path" 
                placeholder="请输入项目路径或点击选择目录"
                class="form-input"
              />
              <input 
                type="file" 
                ref="directoryInput"
                webkitdirectory 
                @change="handleDirectorySelect"
                style="display: none"
              />
              <button @click="selectDirectory" class="btn-secondary">
                <FolderSearch :size="16" />
                <span>选择</span>
              </button>
            </div>
          </div>

          <div class="form-group" v-if="importForm.path">
            <label>
              <FileText :size="16" />
              <span>项目名称</span>
            </label>
            <input 
              type="text" 
              v-model="importForm.name" 
              placeholder="自动从 package.json 读取"
              class="form-input"
            />
          </div>

          <div class="form-group" v-if="importForm.path">
            <label>
              <AlignLeft :size="16" />
              <span>项目描述</span>
            </label>
            <textarea 
              v-model="importForm.description" 
              placeholder="自动从 package.json 读取"
              class="form-textarea"
              rows="3"
            ></textarea>
          </div>

          <div v-if="importError" class="error-message">
            <AlertCircle :size="16" />
            <span>{{ importError }}</span>
          </div>
        </div>
        
        <div class="modal-footer">
          <button @click="closeImportDialog" class="btn-secondary">
            <X :size="16" />
            <span>取消</span>
          </button>
          <button 
            @click="importProject" 
            :disabled="!importForm.path || importing"
            class="btn-primary"
          >
            <Loader2 v-if="importing" :size="16" class="spinning" />
            <Check v-else :size="16" />
            <span>{{ importing ? '导入中...' : '确认导入' }}</span>
          </button>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, onMounted } from 'vue'
import { useRouter } from 'vue-router'
import { 
  RefreshCw, FolderPlus, FolderOpen, FolderGit2, Trash2, Calendar, Tag,
  Loader2, X, Folder, FolderSearch, FileText, AlignLeft, AlertCircle, Check,
  Rocket, Package
} from 'lucide-vue-next'
import { useApi } from '../composables/useApi'

/**
 * 项目管理页面
 * 显示所有项目，支持导入和删除
 */

// 路由
const router = useRouter()

// API
const api = useApi()

// 响应式数据
const loading = ref(false)
const projects = ref<any[]>([])
const showImportDialog = ref(false)
const importing = ref(false)
const importError = ref('')
const directoryInput = ref<HTMLInputElement | null>(null)
const importForm = ref({
  path: '',
  name: '',
  description: ''
})

// 格式化日期
const formatDate = (dateString: string): string => {
  if (!dateString) return 'N/A'
  const date = new Date(dateString)
  return date.toLocaleDateString('zh-CN', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit'
  })
}

// 加载项目列表
const loadProjects = async () => {
  loading.value = true
  try {
    const response = await api.get('/api/projects')
    if (response.success) {
      projects.value = response.data || []
    }
  } catch (error) {
    console.error('加载项目失败:', error)
  } finally {
    loading.value = false
  }
}

// 刷新项目列表
const refreshProjects = () => {
  loadProjects()
}

// 跳转到项目详情
const goToProject = (projectId: string) => {
  router.push(`/projects/${projectId}`)
}

// 删除项目
const deleteProject = async (projectId: string) => {
  if (!confirm('确定要删除这个项目吗？')) return
  
  try {
    const response = await api.delete(`/api/projects/${projectId}`)
    if (response.success) {
      await loadProjects()
    }
  } catch (error) {
    console.error('删除项目失败:', error)
    alert('删除项目失败')
  }
}

// 选择目录
const selectDirectory = () => {
  directoryInput.value?.click()
}

// 处理目录选择
const handleDirectorySelect = (event: Event) => {
  const target = event.target as HTMLInputElement
  const files = target.files
  if (files && files.length > 0) {
    const path = files[0].webkitRelativePath.split('/')[0]
    importForm.value.path = path
  }
}

// 导入项目
const importProject = async () => {
  if (!importForm.value.path) return
  
  importing.value = true
  importError.value = ''
  
  try {
    const response = await api.post('/api/projects/import', {
      path: importForm.value.path,
      name: importForm.value.name,
      description: importForm.value.description
    })
    
    if (response.success) {
      closeImportDialog()
      await loadProjects()
    } else {
      importError.value = response.message || '导入失败'
    }
  } catch (error) {
    importError.value = error instanceof Error ? error.message : '导入失败'
  } finally {
    importing.value = false
  }
}

// 关闭导入对话框
const closeImportDialog = () => {
  showImportDialog.value = false
  importForm.value = { path: '', name: '', description: '' }
  importError.value = ''
}

// 生命周期
onMounted(() => {
  loadProjects()
})
</script>

<style lang="less" scoped>
.project-manager {
  padding: var(--ls-padding-lg);
  max-width: 1600px;
  margin: 0 auto;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--ls-margin-xl);

  .header-left {
    h1 {
      margin: 0 0 4px 0;
      font-size: var(--ls-font-size-h2);
      color: var(--ldesign-text-color-primary);
      font-weight: 600;
    }

    .header-subtitle {
      margin: 0;
      font-size: var(--ls-font-size-sm);
      color: var(--ldesign-text-color-secondary);
    }
  }

  .header-actions {
    display: flex;
    gap: var(--ls-spacing-sm);
  }
}

.projects-container {
  min-height: 400px;
}

.loading-state,
.empty-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 400px;
  color: var(--ldesign-text-color-secondary);

  .loading-spinner {
    animation: spin 1s linear infinite;
    color: var(--ldesign-brand-color);
    margin-bottom: var(--ls-spacing-base);
  }

  .empty-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 120px;
    height: 120px;
    background: var(--ldesign-bg-color-component);
    border-radius: var(--ls-border-radius-full);
    margin-bottom: var(--ls-spacing-lg);
    color: var(--ldesign-text-color-placeholder);
  }

  h2 {
    margin: 0 0 var(--ls-spacing-sm) 0;
    font-size: var(--ls-font-size-h3);
    color: var(--ldesign-text-color-primary);
  }

  p {
    margin: 0 0 var(--ls-spacing-lg) 0;
    font-size: var(--ls-font-size-base);
  }
}

.projects-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: var(--ls-spacing-lg);
}

.project-card {
  background: var(--ldesign-bg-color-container);
  border: 1px solid var(--ldesign-border-color);
  border-radius: var(--ls-border-radius-lg);
  padding: var(--ls-padding-lg);
  cursor: pointer;
  transition: all 0.2s ease;
  box-shadow: var(--ldesign-shadow-1);

  &:hover {
    transform: translateY(-4px);
    box-shadow: var(--ldesign-shadow-2);
    border-color: var(--ldesign-brand-color);
  }

  .project-header {
    display: flex;
    align-items: flex-start;
    gap: var(--ls-spacing-base);
    margin-bottom: var(--ls-spacing-base);

    .project-icon {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 48px;
      height: 48px;
      background: linear-gradient(135deg, var(--ldesign-brand-color-focus), var(--ldesign-brand-color-hover));
      border-radius: var(--ls-border-radius-lg);
      color: var(--ldesign-brand-color);
      flex-shrink: 0;
    }

    .project-info {
      flex: 1;
      min-width: 0;

      .project-name {
        margin: 0 0 6px 0;
        font-size: var(--ls-font-size-lg);
        font-weight: 600;
        color: var(--ldesign-text-color-primary);
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
      }

      .project-badges {
        display: flex;
        gap: var(--ls-spacing-xs);
        flex-wrap: wrap;
      }

      .badge {
        display: inline-flex;
        align-items: center;
        gap: 4px;
        padding: 2px 8px;
        border-radius: var(--ls-border-radius-sm);
        font-size: 12px;
        font-weight: 500;

        &.badge-project {
          background: var(--ldesign-brand-color-focus);
          color: var(--ldesign-brand-color);
        }

        &.badge-library {
          background: var(--ldesign-success-color-focus);
          color: var(--ldesign-success-color);
        }
      }
    }

    .btn-delete {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 32px;
      height: 32px;
      border: 1px solid var(--ldesign-border-color);
      background: var(--ldesign-bg-color-component);
      border-radius: var(--ls-border-radius-base);
      cursor: pointer;
      transition: all 0.2s ease;
      color: var(--ldesign-text-color-secondary);
      flex-shrink: 0;

      &:hover {
        background: var(--ldesign-error-color-focus);
        border-color: var(--ldesign-error-color);
        color: var(--ldesign-error-color);
      }
    }
  }

  .project-description {
    margin-bottom: var(--ls-spacing-base);

    p {
      margin: 0;
      font-size: var(--ls-font-size-sm);
      color: var(--ldesign-text-color-secondary);
      line-height: 1.5;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
  }

  .project-path {
    display: flex;
    align-items: center;
    gap: var(--ls-spacing-xs);
    padding: var(--ls-padding-sm);
    background: var(--ldesign-bg-color-component);
    border-radius: var(--ls-border-radius-base);
    margin-bottom: var(--ls-spacing-base);

    svg {
      color: var(--ldesign-text-color-placeholder);
      flex-shrink: 0;
    }

    span {
      font-size: 12px;
      color: var(--ldesign-text-color-secondary);
      font-family: 'Consolas', 'Monaco', monospace;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
  }

  .project-meta {
    display: flex;
    gap: var(--ls-spacing-base);
    padding-top: var(--ls-padding-sm);
    border-top: 1px solid var(--ldesign-border-color);

    .meta-item {
      display: flex;
      align-items: center;
      gap: 4px;
      font-size: 12px;
      color: var(--ldesign-text-color-secondary);

      svg {
        color: var(--ldesign-text-color-placeholder);
      }
    }
  }
}

// 按钮样式
.btn-primary, .btn-secondary, .btn-large {
  display: inline-flex;
  align-items: center;
  gap: var(--ls-spacing-xs);
  padding: var(--ls-padding-sm) var(--ls-padding-base);
  border: 1px solid transparent;
  border-radius: var(--ls-border-radius-base);
  font-size: var(--ls-font-size-sm);
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .spinning {
    animation: spin 1s linear infinite;
  }
}

.btn-primary {
  background: var(--ldesign-brand-color);
  color: white;

  &:hover:not(:disabled) {
    background: var(--ldesign-brand-color-hover);
    transform: translateY(-1px);
    box-shadow: var(--ldesign-shadow-2);
  }
}

.btn-secondary {
  background: var(--ldesign-bg-color-container);
  color: var(--ldesign-text-color-secondary);
  border-color: var(--ldesign-border-color);

  &:hover:not(:disabled) {
    background: var(--ldesign-bg-color-container-hover);
    border-color: var(--ldesign-brand-color);
    color: var(--ldesign-brand-color);
  }
}

.btn-large {
  padding: var(--ls-padding-base) var(--ls-padding-lg);
  font-size: var(--ls-font-size-base);
}

// 模态框样式
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  backdrop-filter: blur(4px);
}

.modal-content {
  background: var(--ldesign-bg-color-container);
  border-radius: var(--ls-border-radius-lg);
  box-shadow: var(--ldesign-shadow-3);
  width: 90%;
  max-width: 600px;
  max-height: 90vh;
  overflow: hidden;
  display: flex;
  flex-direction: column;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--ls-padding-lg);
  border-bottom: 1px solid var(--ldesign-border-color);

  .modal-title {
    display: flex;
    align-items: center;
    gap: var(--ls-spacing-sm);

    svg {
      color: var(--ldesign-brand-color);
    }

    h2 {
      margin: 0;
      font-size: var(--ls-font-size-h4);
      color: var(--ldesign-text-color-primary);
      font-weight: 600;
    }
  }

  .btn-close {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
    border: none;
    background: none;
    border-radius: var(--ls-border-radius-base);
    cursor: pointer;
    color: var(--ldesign-text-color-secondary);
    transition: all 0.2s ease;

    &:hover {
      background: var(--ldesign-bg-color-component-hover);
      color: var(--ldesign-text-color-primary);
    }
  }
}

.modal-body {
  flex: 1;
  overflow-y: auto;
  padding: var(--ls-padding-lg);

  .form-group {
    margin-bottom: var(--ls-margin-base);

    &:last-child {
      margin-bottom: 0;
    }

    label {
      display: flex;
      align-items: center;
      gap: var(--ls-spacing-xs);
      margin-bottom: var(--ls-spacing-sm);
      font-size: var(--ls-font-size-sm);
      font-weight: 500;
      color: var(--ldesign-text-color-primary);

      svg {
        color: var(--ldesign-brand-color);
      }
    }

    .input-group {
      display: flex;
      gap: var(--ls-spacing-sm);
    }

    .form-input,
    .form-textarea {
      width: 100%;
      padding: var(--ls-padding-sm) var(--ls-padding-base);
      border: 1px solid var(--ldesign-border-color);
      border-radius: var(--ls-border-radius-base);
      font-size: var(--ls-font-size-sm);
      color: var(--ldesign-text-color-primary);
      background: var(--ldesign-bg-color-component);
      transition: all 0.2s ease;

      &:focus {
        outline: none;
        border-color: var(--ldesign-brand-color);
        box-shadow: 0 0 0 3px var(--ldesign-brand-color-focus);
      }

      &::placeholder {
        color: var(--ldesign-text-color-placeholder);
      }
    }

    .form-textarea {
      resize: vertical;
      font-family: inherit;
    }
  }

  .error-message {
    display: flex;
    align-items: center;
    gap: var(--ls-spacing-xs);
    padding: var(--ls-padding-sm) var(--ls-padding-base);
    background: var(--ldesign-error-color-focus);
    border: 1px solid var(--ldesign-error-color);
    border-radius: var(--ls-border-radius-base);
    color: var(--ldesign-error-color);
    font-size: var(--ls-font-size-sm);
    margin-top: var(--ls-margin-base);

    svg {
      flex-shrink: 0;
    }
  }
}

.modal-footer {
  display: flex;
  justify-content: flex-end;
  gap: var(--ls-spacing-sm);
  padding: var(--ls-padding-lg);
  border-top: 1px solid var(--ldesign-border-color);
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

/* 响应式设计 */
@media (max-width: 768px) {
  .project-manager {
    padding: var(--ls-padding-base);
  }

  .page-header {
    flex-direction: column;
    align-items: flex-start;
    gap: var(--ls-spacing-base);

    .header-actions {
      width: 100%;

      button {
        flex: 1;
      }
    }
  }

  .projects-grid {
    grid-template-columns: 1fr;
  }

  .modal-content {
    width: 95%;
    max-height: 95vh;
  }
}
</style>

